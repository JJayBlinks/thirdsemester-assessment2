name: Terraform Infrastructure

on:
  push:
    branches: [ main ]
    paths: [ 'terraform/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'terraform/**' ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Validate backend secrets
      run: |
        TF_STATE_BUCKET='${{ secrets.TF_STATE_BUCKET }}'
        TF_STATE_KEY='${{ secrets.TF_STATE_KEY }}'
        TF_DYNAMODB_TABLE='${{ secrets.TF_DYNAMODB_TABLE }}'
        missing=0
        if [ -z "$TF_STATE_BUCKET" ] || [ "$TF_STATE_BUCKET" = "null" ]; then
          echo "ERROR: TF_STATE_BUCKET is not set in repository secrets"
          missing=1
        fi
        if [ -z "$TF_STATE_KEY" ] || [ "$TF_STATE_KEY" = "null" ]; then
          echo "ERROR: TF_STATE_KEY is not set in repository secrets"
          missing=1
        fi
        if [ -z "$TF_DYNAMODB_TABLE" ] || [ "$TF_DYNAMODB_TABLE" = "null" ]; then
          echo "ERROR: TF_DYNAMODB_TABLE is not set in repository secrets"
          missing=1
        fi
        if [ "$missing" -eq 1 ]; then
          echo "Set the required secrets TF_STATE_BUCKET, TF_STATE_KEY and TF_DYNAMODB_TABLE in repository settings"
          exit 1
        fi

    - name: Terraform Init
      working-directory: terraform/eks/minimal
      run: |
        terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
                        -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
                        -backend-config="region=${{ env.AWS_REGION }}" \
                        -backend-config="dynamodb_table=${{ secrets.TF_DYNAMODB_TABLE }}" \
                        -backend-config="encrypt=true"

    - name: Terraform Plan
      working-directory: terraform/eks/minimal
      run: |
        terraform plan -out=tfplan -no-color
        terraform show -no-color tfplan
      continue-on-error: true

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Validate backend secrets
      run: |
        TF_STATE_BUCKET='${{ secrets.TF_STATE_BUCKET }}'
        TF_STATE_KEY='${{ secrets.TF_STATE_KEY }}'
        TF_DYNAMODB_TABLE='${{ secrets.TF_DYNAMODB_TABLE }}'
        missing=0
        if [ -z "$TF_STATE_BUCKET" ] || [ "$TF_STATE_BUCKET" = "null" ]; then
          echo "ERROR: TF_STATE_BUCKET is not set in repository secrets"
          missing=1
        fi
        if [ -z "$TF_STATE_KEY" ] || [ "$TF_STATE_KEY" = "null" ]; then
          echo "ERROR: TF_STATE_KEY is not set in repository secrets"
          missing=1
        fi
        if [ -z "$TF_DYNAMODB_TABLE" ] || [ "$TF_DYNAMODB_TABLE" = "null" ]; then
          echo "ERROR: TF_DYNAMODB_TABLE is not set in repository secrets"
          missing=1
        fi
        if [ "$missing" -eq 1 ]; then
          echo "Set the required secrets TF_STATE_BUCKET, TF_STATE_KEY and TF_DYNAMODB_TABLE in repository settings"
          exit 1
        fi

    - name: Terraform Init
      working-directory: terraform/eks/minimal
      run: |
        terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
                        -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
                        -backend-config="region=${{ env.AWS_REGION }}" \
                        -backend-config="dynamodb_table=${{ secrets.TF_DYNAMODB_TABLE }}" \
                        -backend-config="encrypt=true"

    - name: Import Existing Resources
      working-directory: terraform/eks/minimal
      run: |
        echo "Importing existing resources into Terraform state"
        # Import EKS cluster
        terraform import -lock=false 'module.retail_app_eks.module.eks_cluster.aws_eks_cluster.this[0]' 'retail-store' || true
        # Import KMS alias
        terraform import -lock=false 'module.retail_app_eks.module.eks_cluster.module.kms.aws_kms_alias.this["cluster"]' 'alias/eks/retail-store' || true
        echo "Import attempts completed"

    - name: Terraform Apply
      working-directory: terraform/eks/minimal
      run: |
        # Force unlock any existing state locks
        terraform force-unlock -force 453ffb36-4889-20eb-56e9-66b0915f73a4 || true
        
        if [ -f tfplan ]; then
          echo "Applying from saved plan tfplan"
          terraform apply -auto-approve tfplan
        else
          echo "No saved plan found; running terraform apply -auto-approve"
          terraform apply -auto-approve
        fi

    - name: Output cluster info
      working-directory: terraform/eks/minimal
      run: |
        echo "EKS Cluster deployed successfully!"
        terraform output configure_kubectl