name: Terraform Infrastructure

on:
  push:
    branches: [ main ]
    paths: [ 'terraform/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'terraform/**' ]
  workflow_dispatch:

env:
  AWS_REGION: eu-north-1
  TF_VERSION: 1.5.0

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      working-directory: terraform/eks/minimal
      run: terraform init

    - name: Terraform Plan
      working-directory: terraform/eks/minimal
      run: terraform plan -no-color
      continue-on-error: true

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Network Connectivity Check
      run: |
        echo "Testing network connectivity..."
        curl -I https://aws.github.io/eks-charts/index.yaml || echo "Direct connection failed"
        nslookup aws.github.io || echo "DNS resolution failed"

    - name: Terraform Init with Retry
      working-directory: terraform/eks/minimal
      run: |
        for i in {1..3}; do
          echo "Terraform init attempt $i/3"
          if terraform init; then
            break
          else
            if [ $i -eq 3 ]; then
              exit 1
            fi
            sleep 15
          fi
        done

    - name: Terraform Apply with Retry
      working-directory: terraform/eks/minimal
      run: |
        # Retry terraform apply up to 3 times for network issues
        for i in {1..3}; do
          echo "Terraform apply attempt $i/3"
          if terraform apply -auto-approve; then
            echo "Terraform apply successful on attempt $i"
            break
          else
            if [ $i -eq 3 ]; then
              echo "Terraform apply failed after 3 attempts"
              exit 1
            fi
            echo "Terraform apply failed on attempt $i, retrying in 30 seconds..."
            sleep 30
          fi
        done

    - name: Output cluster info
      working-directory: terraform/eks/minimal
      run: |
        echo "EKS Cluster deployed successfully!"
        terraform output configure_kubectl