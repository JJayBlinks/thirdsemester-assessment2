name: Terraform Infrastructure

on:
  push:
    branches: [ main ]
    paths: [ 'terraform/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'terraform/**' ]
  workflow_dispatch:

env:
  AWS_REGION: eu-north-1
  TF_VERSION: 1.5.0

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      working-directory: terraform/eks/minimal
      run: |
        terraform init -backend-config="bucket=gabriel-eks-state-s3-bucket" \
                        -backend-config="key=terraform.tfstate" \
                        -backend-config="region=${{ env.AWS_REGION }}" \
                        -backend-config="dynamodb_table=retail-store-terraform-locks" \
                        -backend-config="encrypt=true"

    - name: Terraform Plan
      working-directory: terraform/eks/minimal
      run: terraform plan -no-color
      continue-on-error: true

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      working-directory: terraform/eks/minimal
      run: |
        terraform init -backend-config="bucket=gabriel-eks-state-s3-bucket" \
                        -backend-config="key=terraform.tfstate" \
                        -backend-config="region=${{ env.AWS_REGION }}" \
                        -backend-config="dynamodb_table=retail-store-terraform-locks" \
                        -backend-config="encrypt=true"

    - name: Import Existing Resources
      working-directory: terraform/eks/minimal
      run: |
        # Import existing resources to avoid conflicts
        terraform import aws_dynamodb_table.terraform_locks retail-store-terraform-locks || true
        terraform import module.retail_app_eks.module.eks_cluster.module.kms.aws_kms_alias.this[\"cluster\"] alias/eks/retail-store || true
        terraform import module.retail_app_eks.module.eks_cluster.aws_cloudwatch_log_group.this[0] /aws/eks/retail-store/cluster || true
        echo "Resource import completed"

    - name: Terraform Apply
      working-directory: terraform/eks/minimal
      run: terraform apply -auto-approve

    - name: Output cluster info
      working-directory: terraform/eks/minimal
      run: |
        echo "EKS Cluster deployed successfully!"
        terraform output configure_kubectl