name: Terraform Infrastructure

on:
  push:
    branches: [ main ]
    paths: [ 'terraform/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'terraform/**' ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      working-directory: terraform/eks/minimal
      run: |
        terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
                        -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
                        -backend-config="region=${{ env.AWS_REGION }}" \
                        -backend-config="dynamodb_table=${{ secrets.TF_DYNAMODB_TABLE }}" \
                        -backend-config="encrypt=true"

    - name: Terraform Plan
      working-directory: terraform/eks/minimal
      run: |
        terraform plan -out=tfplan -no-color
        terraform show -no-color tfplan
      continue-on-error: true

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      working-directory: terraform/eks/minimal
      run: |
        terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
                        -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
                        -backend-config="region=${{ env.AWS_REGION }}" \
                        -backend-config="dynamodb_table=${{ secrets.TF_DYNAMODB_TABLE }}" \
                        -backend-config="encrypt=true"

    - name: Handle Existing Resources
      working-directory: terraform/eks/minimal
      run: |
        set -euo pipefail
        echo "Checking for existing resources..."

        # Helper to try import if the resource exists
        try_import() {
          local import_cmd="$1"
          echo "Running: $import_cmd"
          if ! bash -c "$import_cmd" 2>/dev/null; then
            echo "Warning: import failed or resource not present: $import_cmd"
          else
            echo "Imported: $import_cmd"
          fi
        }

        # ADOT roles
        try_import "terraform import module.retail_app_eks.module.iam_assumable_role_adot_amp.aws_iam_role.this[0] retail-store-adot-col-xray"
        try_import "terraform import module.retail_app_eks.module.iam_assumable_role_adot_logs.aws_iam_role.this[0] retail-store-adot-col-logs"

        # IAM user (readonly dev)
        if aws iam get-user --user-name retail-store-eks-readonly-dev >/dev/null 2>&1; then
          try_import "terraform import aws_iam_user.eks_readonly_dev retail-store-eks-readonly-dev"
        else
          echo "IAM user retail-store-eks-readonly-dev not found — Terraform will create it"
        fi

        # IAM policy (search by name)
        POLICY_ARN=$(aws iam list-policies --scope Local --query "Policies[?PolicyName=='retail-store-eks-readonly'].Arn" --output text || true)
        if [ -n "$POLICY_ARN" ] && [ "$POLICY_ARN" != "None" ]; then
          try_import "terraform import aws_iam_policy.eks_readonly $POLICY_ARN"
        else
          echo "IAM policy retail-store-eks-readonly not found — will be created by Terraform"
        fi

        # KMS alias and CloudWatch log group
        if aws kms list-aliases --query "Aliases[?contains(AliasName, 'alias/eks/retail-store')]" --output text | grep -q alias/eks/retail-store; then
          try_import "terraform import aws_kms_alias.eks_cluster alias/eks/retail-store"
        else
          echo "KMS alias alias/eks/retail-store not found — Terraform will create it"
        fi

        if aws logs describe-log-groups --log-group-name-prefix "/aws/eks/retail-store" --query "logGroups[0].logGroupName" --output text | grep -q "/aws/eks/retail-store"; then
          try_import "terraform import aws_cloudwatch_log_group.eks_cluster /aws/eks/retail-store/cluster"
        else
          echo "CloudWatch log group /aws/eks/retail-store/cluster not found — Terraform will create it"
        fi

        echo "Resource import check completed"

    - name: Terraform Apply
      working-directory: terraform/eks/minimal
      run: |
        if [ -f tfplan ]; then
          echo "Applying from saved plan tfplan"
          terraform apply -auto-approve tfplan
        else
          echo "No saved plan found; running terraform apply -auto-approve"
          terraform apply -auto-approve
        fi

    - name: Output cluster info
      working-directory: terraform/eks/minimal
      run: |
        echo "EKS Cluster deployed successfully!"
        terraform output configure_kubectl