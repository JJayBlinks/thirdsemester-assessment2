# # name: Terraform Infrastructure

# # on:
# #   push:
# #     branches: [ main ]
# #     paths: [ 'terraform/**' ]
# #   pull_request:
# #     branches: [ main ]
# #     paths: [ 'terraform/**' ]
# #   workflow_dispatch:

# # env:
# #   AWS_REGION: eu-north-1
# #   TF_VERSION: 1.5.0

# # jobs:
# #   terraform-plan:
# #     name: Terraform Plan
# #     runs-on: ubuntu-latest
# #     if: github.event_name == 'pull_request'
    
# #     steps:
# #     - name: Checkout
# #       uses: actions/checkout@v4

# #     - name: Setup Terraform
# #       uses: hashicorp/setup-terraform@v3
# #       with:
# #         terraform_version: ${{ env.TF_VERSION }}

# #     - name: Configure AWS credentials
# #       uses: aws-actions/configure-aws-credentials@v4
# #       with:
# #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
# #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# #         aws-region: ${{ env.AWS_REGION }}

# #     - name: Terraform Init
# #       working-directory: terraform/eks/minimal
# #       run: terraform init

# #     - name: Terraform Plan
# #       working-directory: terraform/eks/minimal
# #       run: terraform plan -no-color
# #       continue-on-error: true

# #   terraform-apply:
# #     name: Terraform Apply
# #     runs-on: ubuntu-latest
# #     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
# #     steps:
# #     - name: Checkout
# #       uses: actions/checkout@v4

# #     - name: Setup Terraform
# #       uses: hashicorp/setup-terraform@v3
# #       with:
# #         terraform_version: ${{ env.TF_VERSION }}

# #     - name: Configure AWS credentials
# #       uses: aws-actions/configure-aws-credentials@v4
# #       with:
# #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
# #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# #         aws-region: ${{ env.AWS_REGION }}

# #     - name: Network Connectivity Check
# #       run: |
# #         echo "Testing network connectivity..."
# #         curl -I https://aws.github.io/eks-charts/index.yaml || echo "Direct connection failed"
# #         nslookup aws.github.io || echo "DNS resolution failed"

# #     - name: Terraform Init with Retry
# #       working-directory: terraform/eks/minimal
# #       run: |
# #         for i in {1..3}; do
# #           echo "Terraform init attempt $i/3"
# #           if terraform init; then
# #             break
# #           else
# #             if [ $i -eq 3 ]; then
# #               exit 1
# #             fi
# #             sleep 15
# #           fi
# #         done

# #     - name: Import Existing Resources
# #       working-directory: terraform/eks/minimal
# #       run: |
# #         # Import existing resources to avoid conflicts
# #         terraform import aws_dynamodb_table.terraform_locks retail-store-terraform-locks || true
# #         terraform import aws_iam_user.eks_readonly_dev retail-store-eks-readonly-dev || true
# #         terraform import aws_iam_policy.eks_readonly arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:policy/retail-store-eks-readonly || true
# #         echo "Resource import completed"

# #     - name: Terraform Apply with Retry
# #       working-directory: terraform/eks/minimal
# #       run: |
# #         # Retry terraform apply up to 3 times for network issues
# #         for i in {1..3}; do
# #           echo "Terraform apply attempt $i/3"
# #           if terraform apply -auto-approve; then
# #             echo "Terraform apply successful on attempt $i"
# #             break
# #           else
# #             if [ $i -eq 3 ]; then
# #               echo "Terraform apply failed after 3 attempts"
# #               exit 1
# #             fi
# #             echo "Terraform apply failed on attempt $i, retrying in 30 seconds..."
# #             sleep 30
# #           fi
# #         done

# #     - name: Output cluster info
# #       working-directory: terraform/eks/minimal
# #       run: |
# #         echo "EKS Cluster deployed successfully!"
# #         terraform output configure_kubectl










# name: Terraform Infrastructure

# on:
#   push:
#     branches: [ main ]
#     paths: [ 'terraform/**' ]
#   pull_request:
#     branches: [ main ]
#     paths: [ 'terraform/**' ]
#   workflow_dispatch:
#     inputs:
#       destroy:
#         description: "Set to true to destroy infrastructure"
#         required: false
#         default: "false"

# env:
#   AWS_REGION: eu-north-1
#   TF_VERSION: 1.5.0
#   TF_STATE_BUCKET: my-terraform-state-bucket         # change this to your S3 bucket name
#   TF_STATE_KEY: eks/minimal/terraform.tfstate
#   TF_STATE_LOCK_TABLE: retail-store-terraform-locks  # DynamoDB table for state locking

# jobs:
#   terraform-plan:
#     name: Terraform Plan
#     runs-on: ubuntu-latest
#     if: github.event_name == 'pull_request'
    
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4

#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v3
#       with:
#         terraform_version: ${{ env.TF_VERSION }}

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Ensure S3 bucket and DynamoDB table exist
#       run: |
#         set -e
#         if ! aws s3 ls "s3://${TF_STATE_BUCKET}" 2>&1 | grep -q 'NoSuchBucket'; then
#           echo "S3 bucket ${TF_STATE_BUCKET} exists or will be created"
#         else
#           echo "Creating S3 bucket ${TF_STATE_BUCKET}"
#           aws s3 mb s3://${TF_STATE_BUCKET} --region ${AWS_REGION}
#         fi

#         if ! aws dynamodb describe-table --table-name ${TF_STATE_LOCK_TABLE} >/dev/null 2>&1; then
#           echo "Creating DynamoDB table ${TF_STATE_LOCK_TABLE}"
#           aws dynamodb create-table \
#             --table-name ${TF_STATE_LOCK_TABLE} \
#             --attribute-definitions AttributeName=LockID,AttributeType=S \
#             --key-schema AttributeName=LockID,KeyType=HASH \
#             --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
#             --region ${AWS_REGION}
#         else
#           echo "DynamoDB table ${TF_STATE_LOCK_TABLE} already exists"
#         fi

#     - name: Terraform Init
#       working-directory: terraform/eks/minimal
#       run: terraform init -backend-config="bucket=${TF_STATE_BUCKET}" -backend-config="key=${TF_STATE_KEY}" -backend-config="region=${AWS_REGION}" -backend-config="dynamodb_table=${TF_STATE_LOCK_TABLE}"

#     - name: Terraform Plan
#       working-directory: terraform/eks/minimal
#       run: terraform plan -no-color
#       continue-on-error: true

#   terraform-apply:
#     name: Terraform Apply
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4

#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v3
#       with:
#         terraform_version: ${{ env.TF_VERSION }}

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Ensure S3 bucket and DynamoDB table exist
#       run: |
#         set -e
#         if ! aws s3 ls "s3://${TF_STATE_BUCKET}" 2>&1 | grep -q 'NoSuchBucket'; then
#           echo "S3 bucket ${TF_STATE_BUCKET} exists or will be created"
#         else
#           echo "Creating S3 bucket ${TF_STATE_BUCKET}"
#           aws s3 mb s3://${TF_STATE_BUCKET} --region ${AWS_REGION}
#         fi

#         if ! aws dynamodb describe-table --table-name ${TF_STATE_LOCK_TABLE} >/dev/null 2>&1; then
#           echo "Creating DynamoDB table ${TF_STATE_LOCK_TABLE}"
#           aws dynamodb create-table \
#             --table-name ${TF_STATE_LOCK_TABLE} \
#             --attribute-definitions AttributeName=LockID,AttributeType=S \
#             --key-schema AttributeName=LockID,KeyType=HASH \
#             --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
#             --region ${AWS_REGION}
#         else
#           echo "DynamoDB table ${TF_STATE_LOCK_TABLE} already exists"
#         fi

#     - name: Network Connectivity Check
#       run: |
#         echo "Testing network connectivity..."
#         curl -I https://aws.github.io/eks-charts/index.yaml || echo "Direct connection failed"
#         nslookup aws.github.io || echo "DNS resolution failed"

#     - name: Terraform Init with Retry
#       working-directory: terraform/eks/minimal
#       run: |
#         for i in {1..3}; do
#           echo "Terraform init attempt $i/3"
#           if terraform init -backend-config="bucket=${TF_STATE_BUCKET}" -backend-config="key=${TF_STATE_KEY}" -backend-config="region=${AWS_REGION}" -backend-config="dynamodb_table=${TF_STATE_LOCK_TABLE}"; then
#             echo "Terraform init successful on attempt $i"
#             break
#           else
#             if [ $i -eq 3 ]; then
#               echo "Terraform init failed after 3 attempts"
#               exit 1
#             fi
#             echo "Retrying terraform init in 15 seconds..."
#             sleep 15
#           fi
#         done

#     - name: Import Existing Resources
#       working-directory: terraform/eks/minimal
#       run: |
#         terraform import aws_dynamodb_table.terraform_locks retail-store-terraform-locks || true
#         terraform import aws_iam_user.eks_readonly_dev retail-store-eks-readonly-dev || true
#         terraform import aws_iam_policy.eks_readonly arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:policy/retail-store-eks-readonly || true
#         echo "Resource import completed"

#     - name: Terraform Apply with Retry
#       working-directory: terraform/eks/minimal
#       run: |
#         for i in {1..3}; do
#           echo "Terraform apply attempt $i/3"
#           if terraform apply -auto-approve; then
#             echo "Terraform apply successful on attempt $i"
#             break
#           else
#             if [ $i -eq 3 ]; then
#               echo "Terraform apply failed after 3 attempts"
#               exit 1
#             fi
#             echo "Terraform apply failed on attempt $i, retrying in 30 seconds..."
#             sleep 30
#           fi
#         done

#     - name: Output cluster info
#       working-directory: terraform/eks/minimal
#       run: |
#         echo "EKS Cluster deployed successfully!"
#         terraform output configure_kubectl

#   terraform-destroy:
#     name: Terraform Destroy
#     runs-on: ubuntu-latest
#     if: github.event_name == 'workflow_dispatch' && github.event.inputs.destroy == 'true'
    
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4

#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v3
#       with:
#         terraform_version: ${{ env.TF_VERSION }}

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Terraform Init with Retry
#       working-directory: terraform/eks/minimal
#       run: |
#         for i in {1..3}; do
#           echo "Terraform init attempt $i/3"
#           if terraform init -backend-config="bucket=${TF_STATE_BUCKET}" -backend-config="key=${TF_STATE_KEY}" -backend-config="region=${AWS_REGION}" -backend-config="dynamodb_table=${TF_STATE_LOCK_TABLE}"; then
#             echo "Terraform init successful on attempt $i"
#             break
#           else
#             if [ $i -eq 3 ]; then
#               echo "Terraform init failed after 3 attempts"
#               exit 1
#             fi
#             echo "Retrying terraform init in 15 seconds..."
#             sleep 15
#           fi
#         done

#     - name: Terraform Destroy with Retry
#       working-directory: terraform/eks/minimal
#       run: |
#         for i in {1..3}; do
#           echo "Terraform destroy attempt $i/3"
#           if terraform destroy -auto-approve; then
#             echo "Terraform destroy successful on attempt $i"
#             break
#           else
#             if [ $i -eq 3 ]; then
#               echo "Terraform destroy failed after 3 attempts"
#               exit 1
#             fi
#             echo "Terraform destroy failed on attempt $i, retrying in 30 seconds..."
#             sleep 30
#           fi
#         done
