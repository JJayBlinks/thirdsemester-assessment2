# name: Build, Test & Deploy Application

# on:
#   push:
#     branches:
#       - main
#     paths:
#       - 'src/**'
#   pull_request:
#     branches:
#       - main
#     paths:
#       - 'src/**'

# env:
#   AWS_REGION: us-east-1
#   EKS_CLUSTER_NAME: retail-store
#   ECR_REGISTRY: public.ecr.aws/aws-containers

# jobs:
#   build-and-test:
#     name: Build & Test
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         service: [ui, catalog, cart, orders, checkout]
    
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4

#     - name: Setup Java (for Java services)
#       if: matrix.service == 'ui' || matrix.service == 'cart' || matrix.service == 'orders'
#       uses: actions/setup-java@v4
#       with:
#         java-version: '17'
#         distribution: 'temurin'

#     - name: Setup Go (for catalog service)
#       if: matrix.service == 'catalog'
#       uses: actions/setup-go@v4
#       with:
#         go-version: '1.21'

#     - name: Setup Node.js (for checkout service)
#       if: matrix.service == 'checkout'
#       uses: actions/setup-node@v4
#       with:
#         node-version: '18'

#     - name: Build Java Service
#       if: matrix.service == 'ui' || matrix.service == 'cart' || matrix.service == 'orders'
#       run: |
#         cd src/${{ matrix.service }}
#         ./mvnw clean compile

#     - name: Test Java Service
#       if: matrix.service == 'ui' || matrix.service == 'cart' || matrix.service == 'orders'
#       run: |
#         cd src/${{ matrix.service }}
#         ./mvnw test

#     - name: Build Go Service
#       if: matrix.service == 'catalog'
#       run: |
#         cd src/${{ matrix.service }}
#         go build -v ./...

#     - name: Test Go Service
#       if: matrix.service == 'catalog'
#       run: |
#         cd src/${{ matrix.service }}
#         go test -v ./...

#     - name: Build Node.js Service
#       if: matrix.service == 'checkout'
#       run: |
#         cd src/${{ matrix.service }}
#         npm ci

#     - name: Test Node.js Service
#       if: matrix.service == 'checkout'
#       run: |
#         cd src/${{ matrix.service }}
#         npm test

#   deploy:
#     name: Deploy Application
#     runs-on: ubuntu-latest
#     needs: build-and-test
#     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Update kubeconfig
#       run: |
#         aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

#     - name: Deploy Application
#       run: |
#         kubectl apply -f https://github.com/aws-containers/retail-store-sample-app/releases/latest/download/kubernetes.yaml
#         kubectl wait --for=condition=available deployments --all --timeout=600s

#     - name: Get Application Status
#       run: |
#         echo "=== Deployment Status ==="
#         kubectl get pods --all-namespaces
#         echo "=== Services ==="
#         kubectl get svc --all-namespaces
#         echo "=== Application URL ==="
#         kubectl get svc ui -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || echo "LoadBalancer pending..."

#   e2e-tests:
#     name: E2E Tests
#     runs-on: ubuntu-latest
#     needs: deploy
#     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Update kubeconfig
#       run: |
#         aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

#     - name: Wait for LoadBalancer
#       run: |
#         kubectl wait --for=condition=available deployment/ui -n ui --timeout=300s
#         sleep 60  # Additional wait for LoadBalancer

#     - name: Run E2E Tests
#       run: |
#         LB_URL=$(kubectl get svc ui -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
#         if [ ! -z "$LB_URL" ]; then
#           echo "Testing application at: http://$LB_URL"
#           curl -f "http://$LB_URL" || echo "Application not ready yet"
#         else
#           echo "LoadBalancer URL not available"
#         fi